name: Auto-generate CHANGELOG
on:
  workflow_dispatch:

jobs:
  changelog:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout BananaWRT
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Authenticate GitHub
        env:
            GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
            git config --global user.name "GitHub Actions"
            git config --global user.email "actions@github.com"
            echo "machine github.com login ${{ secrets.PERSONAL_ACCESS_TOKEN }}" > ~/.netrc
            chmod 600 ~/.netrc

      - name: Initialize CHANGELOG if missing
        run: |
          if [ ! -f CHANGELOG.md ]; then
            echo "# üì¶ CHANGELOG" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "All notable changes to **BananaWRT** will be documented in this file." >> CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "---" >> CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "## [$(date +'%Y-%m-%d')]" >> CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "üõ†Ô∏è Maintained with ‚ù§Ô∏è by [BananaWRT](https://github.com/SuperKali/BananaWRT)" >> CHANGELOG.md
            echo "üìÖ Release date: **$(date +'%B %d, %Y')**" >> CHANGELOG.md
          fi
      
      - name: Set latest changelog date
        id: changelog_date
        run: |
          DATE=$(grep -m1 '^## \[' CHANGELOG.md | grep -oE '[0-9]{4}-[0-9]{2}-[0-9]{2}' || echo "1970-01-01")
          echo "last_date=$DATE" >> $GITHUB_OUTPUT
      
      - name: Clone additional_pack repo
        run: |
          git clone https://github.com/SuperKali/openwrt-packages.git ../additional_pack
      
      - name: Extract logs from additional_pack
        id: additional_logs
        run: |
          cd ../additional_pack
          git log --since="${{ steps.changelog_date.outputs.last_date }}" --pretty=format:"%s|@%an" > ../additional_raw.txt
          if [ -s "../additional_raw.txt" ]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Extract logs from BananaWRT
        id: core_logs
        run: |
          git log --since="${{ steps.changelog_date.outputs.last_date }}" --pretty=format:"%s|@%an" > core_raw.txt
          if [ -s "core_raw.txt" ]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Skip if no changes
        id: check_changes
        run: |
          if [[ "${{ steps.additional_logs.outputs.has_changes }}" == "false" && "${{ steps.core_logs.outputs.has_changes }}" == "false" ]]; then
            echo "No changes found since last changelog update. Skipping."
            echo "skip_update=true" >> $GITHUB_OUTPUT
          else
            echo "skip_update=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Parse and format changes
        if: steps.check_changes.outputs.skip_update != 'true'
        run: |
          parse_line() {
            MSG="$1"
            AUTHOR="$2"
            if echo "$MSG" | grep -iqE '\b(fix|bug|hotfix)\b'; then ICON="üêõ"
            elif echo "$MSG" | grep -iqE '\b(add|initial|support|release)\b'; then ICON="üöÄ"
            elif echo "$MSG" | grep -iqE '\b(update|bump|upgrade|change|refactor|align|improve)\b'; then ICON="üõ†Ô∏è"
            elif echo "$MSG" | grep -iqE '\b(remove|delete|drop)\b'; then ICON="üóëÔ∏è"
            elif echo "$MSG" | grep -iqE '\b(security|secure|patch)\b'; then ICON="üîí"
            elif echo "$MSG" | grep -iqE '\b(doc|docs|documentation)\b'; then ICON="üìù"
            elif echo "$MSG" | grep -iqE '\b(issue|template)\b'; then ICON="üêû"
            elif echo "$MSG" | grep -iqE '\b(fan|cooling)\b'; then ICON="üå¨Ô∏è"
            elif echo "$MSG" | grep -iqE '\b(package|pkg)\b'; then ICON="üì¶"
            elif echo "$MSG" | grep -iqE '\b(info|log)\b'; then ICON="‚ÑπÔ∏è"
            elif echo "$MSG" | grep -iqE '\b(time|timer|sleep)\b'; then ICON="‚è±Ô∏è"
            elif echo "$MSG" | grep -iqE '\b(script|sh)\b'; then ICON="üìú"
            elif echo "$MSG" | grep -iqE '\b(link|url)\b'; then ICON="üîó"
            elif echo "$MSG" | grep -iqE '\b(config|conf)\b'; then ICON="‚öôÔ∏è"
            elif echo "$MSG" | grep -iqE '\b(clean|cleanup)\b'; then ICON="üßπ"
            elif echo "$MSG" | grep -iqE '\b(code|conduct)\b'; then ICON="üìÑ"
            else ICON="‚ö´"; fi
            echo "$ICON $MSG by $AUTHOR"
          }
          
          if [[ "${{ steps.additional_logs.outputs.has_changes }}" == "true" ]]; then
            > additional_changes.txt
            while IFS='|' read -r msg author; do
              parse_line "$msg" "$author" >> additional_changes.txt
            done < ../additional_raw.txt
            sed -i '/^$/d' additional_changes.txt
          else
            echo "No changes in this period" > additional_changes.txt
          fi
          
          if [[ "${{ steps.core_logs.outputs.has_changes }}" == "true" ]]; then
            > core_changes.txt
            while IFS='|' read -r msg author; do
              parse_line "$msg" "$author" >> core_changes.txt
            done < core_raw.txt
            sed -i '/^$/d' core_changes.txt
          else
            echo "No changes in this period" > core_changes.txt
          fi
      
      - name: Format new changelog
        if: steps.check_changes.outputs.skip_update != 'true'
        run: |
          TODAY=$(date +'%Y-%m-%d')
          {
            echo "## [$TODAY]"
            echo ""
            echo "### üß© Additional Packages"
            if [ -s additional_changes.txt ]; then
              while read line; do
                echo "- $line"
              done < additional_changes.txt
            else
              echo "- No changes in this period"
            fi
            echo ""
            echo "### üçå BananaWRT Core"
            if [ -s core_changes.txt ]; then
              while read line; do
                echo "- $line"
              done < core_changes.txt
            else
              echo "- No changes in this period"
            fi
            echo ""
            echo "---"
          } > new_changes.md
      
      - name: Prepare footer
        if: steps.check_changes.outputs.skip_update != 'true'
        run: |
          TODAY=$(date +'%d')
          MONTH=$(date +'%B')
          YEAR=$(date +'%Y')
          echo "" > footer.md
          echo "üõ†Ô∏è Maintained with ‚ù§Ô∏è by [BananaWRT](https://github.com/SuperKali/BananaWRT)" >> footer.md
          echo "üìÖ Release date: **$MONTH $TODAY, $YEAR**" >> footer.md
      
      - name: Prepend to CHANGELOG.md
        if: steps.check_changes.outputs.skip_update != 'true'
        run: |
          mkdir -p temp_dir
          
          awk '/^---$/{exit} {print}' CHANGELOG.md > temp_dir/header.md
          echo "" >> temp_dir/header.md
          echo "---" >> temp_dir/header.md
          echo "" >> temp_dir/header.md
          
          cat new_changes.md >> temp_dir/header.md
          
          awk '/^## \[/{flag=1} /^üõ†Ô∏è/{flag=0} flag {print}' CHANGELOG.md > temp_dir/versions.md
          
          cat temp_dir/header.md temp_dir/versions.md footer.md > CHANGELOG.md
      
      - name: Cleanup changelog (keep latest 10 releases)
        if: steps.check_changes.outputs.skip_update != 'true'
        run: |
          mkdir -p temp_dir
          
          awk 'BEGIN{header=""} /^## \[/{exit} {header=header $0 "\n"} END{printf "%s", header}' CHANGELOG.md > temp_dir/header.md
          
          awk 'BEGIN{save=0; content=""}
              /^## \[/{save=1}
              /^üõ†Ô∏è/{save=0}
              save==1 {content=content $0 "\n"}
              END{printf "%s", content}' CHANGELOG.md |
              awk -v RS="---\n\n" 'BEGIN{count=0}
                  /^## \[/{count++}
                  count <= 10 {print $0 (count<=9 ? "---\n\n" : "")}' > temp_dir/releases.md
          
          grep -A1 "^üõ†Ô∏è" CHANGELOG.md > temp_dir/footer.md
          
          cat temp_dir/header.md temp_dir/releases.md temp_dir/footer.md > CHANGELOG.md
          
          sed -i -e :a -e '/^\n*$/{$d;N;ba' -e '}' CHANGELOG.md
          sed -i -e :a -e '/---\n*$/{$d;N;ba' -e '}' CHANGELOG.md
          cat -s CHANGELOG.md > temp_dir/cleaned.md
          mv temp_dir/cleaned.md CHANGELOG.md
      
      - name: Remove temporary files
        if: steps.check_changes.outputs.skip_update != 'true'
        run: |
          rm -rf temp_dir new_changes.md additional_changes.txt core_changes.txt additional_raw.txt core_raw.txt footer.md rest.md header.md releases.md
      
      - name: Get current date
        id: date
        run: |
          echo "date=$(date +'%B %d, %Y')" >> $GITHUB_OUTPUT
          echo "today=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
      
      - name: Create Pull Request
        if: steps.check_changes.outputs.skip_update != 'true'
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          commit-message: "chore: update changelog [auto]"
          title: "üìù Update CHANGELOG for ${{ steps.date.outputs.date }}"
          body: |
            This pull request updates the CHANGELOG with the latest changes from **${{ steps.changelog_date.outputs.last_date }}** to **${{ steps.date.outputs.today }}**.
            
            Changes included:
            - Updates from BananaWRT core repository
            - Updates from Additional Packages repository
            
            This PR was automatically generated by the Auto-generate CHANGELOG workflow.
            
            Labels: documentation, automation, changelog
          branch: changelog-update-${{ steps.date.outputs.today }}
          delete-branch: true
          labels: documentation, automation, changelog

      - name: Cleanup Workspace
        if: always()
        run: |
            sudo rm -rf ~/.netrc

      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@v2.0.6
        with:
           retain_days: 0
           keep_minimum_runs: 10