name: Auto-generate CHANGELOG
on:
  workflow_dispatch:

jobs:
  changelog:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout BananaWRT
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Authenticate GitHub
        env:
            GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
            git config --global user.name "GitHub Actions"
            git config --global user.email "actions@github.com"
            echo "machine github.com login ${{ secrets.PERSONAL_ACCESS_TOKEN }}" > ~/.netrc
            chmod 600 ~/.netrc

      - name: Set latest changelog date
        id: changelog_date
        run: |
          DATE=$(grep -m1 '^## \[' CHANGELOG.md | grep -oE '[0-9]{4}-[0-9]{2}-[0-9]{2}' || echo "1970-01-01")
          echo "last_date=$DATE" >> $GITHUB_OUTPUT
      
      - name: Clone additional_pack repo
        run: |
          git clone https://github.com/SuperKali/openwrt-packages.git ../additional_pack
      
      - name: Extract logs from additional_pack
        id: additional_logs
        run: |
          cd ../additional_pack
          git log --since="${{ steps.changelog_date.outputs.last_date }}" --pretty=format:"%s|@%an" > ../additional_raw.txt
          if [ -s "../additional_raw.txt" ]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Extract logs from BananaWRT
        id: core_logs
        run: |
          git log --since="${{ steps.changelog_date.outputs.last_date }}" --pretty=format:"%s|@%an" > core_raw.txt
          if [ -s "core_raw.txt" ]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Skip if no changes
        id: check_changes
        run: |
          if [[ "${{ steps.additional_logs.outputs.has_changes }}" == "false" && "${{ steps.core_logs.outputs.has_changes }}" == "false" ]]; then
            echo "No changes found since last changelog update. Skipping."
            echo "skip_update=true" >> $GITHUB_OUTPUT
          else
            echo "skip_update=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Create new changelog
        if: steps.check_changes.outputs.skip_update != 'true'
        run: |
          mkdir -p temp
          
          TODAY=$(date +'%Y-%m-%d')
          MONTH=$(date +'%B')
          DAY=$(date +'%d')
          YEAR=$(date +'%Y')
          
          process_commits() {
            input_file=$1
            if [ ! -s "$input_file" ]; then
              echo "- No changes in this period"
              return
            fi
            
            while IFS='|' read -r msg author; do
              if echo "$msg" | grep -iqE '\b(fix|bug|hotfix)\b'; then ICON="🐛"
              elif echo "$msg" | grep -iqE '\b(add|initial|support|release)\b'; then ICON="🚀"
              elif echo "$msg" | grep -iqE '\b(update|bump|upgrade|change|refactor|align|improve)\b'; then ICON="🛠️"
              elif echo "$msg" | grep -iqE '\b(remove|delete|drop)\b'; then ICON="🗑️"
              elif echo "$msg" | grep -iqE '\b(security|secure|patch)\b'; then ICON="🔒"
              elif echo "$msg" | grep -iqE '\b(doc|docs|documentation)\b'; then ICON="📝"
              elif echo "$msg" | grep -iqE '\b(issue|template)\b'; then ICON="🐞"
              elif echo "$msg" | grep -iqE '\b(fan|cooling)\b'; then ICON="🌬️"
              elif echo "$msg" | grep -iqE '\b(package|pkg)\b'; then ICON="📦"
              elif echo "$msg" | grep -iqE '\b(info|log)\b'; then ICON="ℹ️"
              elif echo "$msg" | grep -iqE '\b(time|timer|sleep)\b'; then ICON="⏱️"
              elif echo "$msg" | grep -iqE '\b(script|sh)\b'; then ICON="📜"
              elif echo "$msg" | grep -iqE '\b(link|url)\b'; then ICON="🔗"
              elif echo "$msg" | grep -iqE '\b(config|conf)\b'; then ICON="⚙️"
              elif echo "$msg" | grep -iqE '\b(clean|cleanup)\b'; then ICON="🧹"
              elif echo "$msg" | grep -iqE '\b(code|conduct)\b'; then ICON="📄"
              else ICON="⚫"; fi
              
              echo "- $ICON $msg by $author"
            done < "$input_file"
          }
          
          if [ -f CHANGELOG.md ]; then
            awk '
              BEGIN { count = 0; printing = 0; }
              /^## \[/ { 
                count++; 
                if (count > 1 && count <= 10) { printing = 1; } 
                else { printing = 0; }
              }
              /^🛠️/ { printing = 0; }
              printing { print; }
            ' CHANGELOG.md > temp/old_entries.txt
          else
            touch temp/old_entries.txt
          fi
          
          {
            # Header
            echo "# 📦 CHANGELOG"
            echo ""
            echo "All notable changes to **BananaWRT** will be documented in this file."
            echo ""
            echo "---"
            echo ""
            
            # New entry
            echo "## [$TODAY]"
            echo ""
            echo "### 🧩 Additional Packages"
            process_commits "../additional_raw.txt"
            echo ""
            echo "### 🍌 BananaWRT Core"
            process_commits "core_raw.txt"
            echo ""
            echo "---"
            echo ""
            
            if [ -s temp/old_entries.txt ]; then
              cat temp/old_entries.txt
            fi
            
            echo -e "🛠️ Maintained with ❤️ by [BananaWRT](https://github.com/SuperKali/BananaWRT)\n"
            echo -e "📅 Release date: **$MONTH $DAY, $YEAR**"
          } > CHANGELOG.md
      
      - name: Cleanup before commit
        if: steps.check_changes.outputs.skip_update != 'true'
        run: |
          rm -rf temp ../additional_pack additional_raw.txt core_raw.txt
      
      - name: Get current date
        id: date
        run: |
          echo "date=$(date +'%B %d, %Y')" >> $GITHUB_OUTPUT
          echo "today=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
      
      - name: Create Pull Request
        if: steps.check_changes.outputs.skip_update != 'true'
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          commit-message: "chore: update changelog [auto]"
          title: "📝 Update CHANGELOG for ${{ steps.date.outputs.date }}"
          body: |
            This pull request updates the CHANGELOG with the latest changes from **${{ steps.changelog_date.outputs.last_date }}** to **${{ steps.date.outputs.today }}**.
            
            Changes included:
            - Updates from BananaWRT core repository
            - Updates from Additional Packages repository
            
            This PR was automatically generated by the Auto-generate CHANGELOG workflow.
            
            Labels: documentation, automation, changelog
          branch: changelog-update-${{ steps.date.outputs.today }}
          delete-branch: true
          labels: documentation, automation, changelog

      - name: Cleanup Workspace
        if: always()
        run: |
            sudo rm -rf ~/.netrc

      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@v2.0.6
        with:
           retain_days: 0
           keep_minimum_runs: 10