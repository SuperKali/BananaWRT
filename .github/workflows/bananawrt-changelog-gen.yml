name: Auto-generate CHANGELOG
on:
  workflow_dispatch:

jobs:
  changelog:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout BananaWRT
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Authenticate GitHub
        env:
            GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
            git config --global user.name "GitHub Actions"
            git config --global user.email "actions@github.com"
            echo "machine github.com login ${{ secrets.PERSONAL_ACCESS_TOKEN }}" > ~/.netrc
            chmod 600 ~/.netrc

      - name: Set latest changelog date
        id: changelog_date
        run: |
          if [ -f CHANGELOG.md ]; then
            DATE=$(grep -m1 '^## \[' CHANGELOG.md | grep -oE '[0-9]{4}-[0-9]{2}-[0-9]{2}' || echo "1970-01-01")
          else
            DATE="1970-01-01"
          fi
          echo "last_date=$DATE" >> $GITHUB_OUTPUT
      
      - name: Clone additional_pack repo
        run: |
          git clone https://github.com/SuperKali/openwrt-packages.git ../additional_pack
      
      - name: Extract logs
        id: extract_logs
        run: |
          cd ../additional_pack
          git log --since="${{ steps.changelog_date.outputs.last_date }}" --pretty=format:"%s|@%an" > ../additional_raw.txt
          cd $GITHUB_WORKSPACE
          
          git log --since="${{ steps.changelog_date.outputs.last_date }}" --pretty=format:"%s|@%an" > core_raw.txt
          
          if [ ! -s "../additional_raw.txt" ] && [ ! -s "core_raw.txt" ]; then
            echo "No changes found since last changelog update. Skipping."
            echo "skip_update=true" >> $GITHUB_OUTPUT
          else
            echo "skip_update=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Parse commits and rebuild changelog
        if: steps.extract_logs.outputs.skip_update != 'true'
        run: |
          mkdir -p temp
          
          parse_line() {
            MSG="$1"
            AUTHOR="$2"
            if echo "$MSG" | grep -iqE '\b(fix|bug|hotfix)\b'; then ICON="üêõ"
            elif echo "$MSG" | grep -iqE '\b(add|initial|support|release)\b'; then ICON="üöÄ"
            elif echo "$MSG" | grep -iqE '\b(update|bump|upgrade|change|refactor|align|improve)\b'; then ICON="üõ†Ô∏è"
            elif echo "$MSG" | grep -iqE '\b(remove|delete|drop)\b'; then ICON="üóëÔ∏è"
            elif echo "$MSG" | grep -iqE '\b(security|secure|patch)\b'; then ICON="üîí"
            elif echo "$MSG" | grep -iqE '\b(doc|docs|documentation)\b'; then ICON="üìù"
            elif echo "$MSG" | grep -iqE '\b(issue|template)\b'; then ICON="üêû"
            elif echo "$MSG" | grep -iqE '\b(fan|cooling)\b'; then ICON="üå¨Ô∏è"
            elif echo "$MSG" | grep -iqE '\b(package|pkg)\b'; then ICON="üì¶"
            elif echo "$MSG" | grep -iqE '\b(info|log)\b'; then ICON="‚ÑπÔ∏è"
            elif echo "$MSG" | grep -iqE '\b(time|timer|sleep)\b'; then ICON="‚è±Ô∏è"
            elif echo "$MSG" | grep -iqE '\b(script|sh)\b'; then ICON="üìú"
            elif echo "$MSG" | grep -iqE '\b(link|url)\b'; then ICON="üîó"
            elif echo "$MSG" | grep -iqE '\b(config|conf)\b'; then ICON="‚öôÔ∏è"
            elif echo "$MSG" | grep -iqE '\b(clean|cleanup)\b'; then ICON="üßπ"
            elif echo "$MSG" | grep -iqE '\b(code|conduct)\b'; then ICON="üìÑ"
            else ICON="‚ö´"; fi
            echo "- $ICON $MSG by $AUTHOR"
          }
          
          > temp/additional_entries.txt
          if [ -s "../additional_raw.txt" ]; then
            while IFS='|' read -r msg author; do
              parse_line "$msg" "$author" >> temp/additional_entries.txt
            done < ../additional_raw.txt
          else
            echo "- No changes in this period" >> temp/additional_entries.txt
          fi
          
          > temp/core_entries.txt
          if [ -s "core_raw.txt" ]; then
            while IFS='|' read -r msg author; do
              parse_line "$msg" "$author" >> temp/core_entries.txt
            done < core_raw.txt
          else
            echo "- No changes in this period" >> temp/core_entries.txt
          fi
          
          if [ -f CHANGELOG.md ]; then
            awk '
              BEGIN { entry_started = 0; current = 0; }
              /^## \[/ { 
                current++; 
                if (current > 1 && current <= 10) {
                  entry_started = 1;
                  print $0;
                  next;
                } else if (current > 10) {
                  exit;
                }
              }
              /^üõ†Ô∏è/ { exit; }
              entry_started == 1 { print; }
            ' CHANGELOG.md > temp/old_entries.txt
          else
            touch temp/old_entries.txt
          fi
          
          TODAY=$(date +'%Y-%m-%d')
          MONTH=$(date +'%B')
          DAY=$(date +'%d')
          YEAR=$(date +'%Y')
          
          echo "# üì¶ CHANGELOG" > temp/header.txt
          echo "" >> temp/header.txt
          echo "All notable changes to **BananaWRT** will be documented in this file." >> temp/header.txt
          echo "" >> temp/header.txt
          echo "---" >> temp/header.txt
          echo "" >> temp/header.txt
          
          echo "## [$TODAY]" > temp/new_entry.txt
          echo "" >> temp/new_entry.txt
          echo "### üß© Additional Packages" >> temp/new_entry.txt
          cat temp/additional_entries.txt >> temp/new_entry.txt
          echo "" >> temp/new_entry.txt
          echo "### üçå BananaWRT Core" >> temp/new_entry.txt
          cat temp/core_entries.txt >> temp/new_entry.txt
          echo "" >> temp/new_entry.txt
          echo "---" >> temp/new_entry.txt
          
          echo "üõ†Ô∏è Maintained with ‚ù§Ô∏è by [BananaWRT](https://github.com/SuperKali/BananaWRT)" > temp/footer.txt
          echo "üìÖ Release date: **$MONTH $DAY, $YEAR**" >> temp/footer.txt
          
          cat temp/header.txt > CHANGELOG.md
          cat temp/new_entry.txt >> CHANGELOG.md
          if [ -s temp/old_entries.txt ]; then
            cat temp/old_entries.txt >> CHANGELOG.md
          fi
          cat temp/footer.txt >> CHANGELOG.md
      
      - name: Get current date
        id: date
        run: |
          echo "date=$(date +'%B %d, %Y')" >> $GITHUB_OUTPUT
          echo "today=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
      
      - name: Create Pull Request
        if: steps.extract_logs.outputs.skip_update != 'true'
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          commit-message: "chore: update changelog [auto]"
          title: "üìù Update CHANGELOG for ${{ steps.date.outputs.date }}"
          body: |
            This pull request updates the CHANGELOG with the latest changes from **${{ steps.changelog_date.outputs.last_date }}** to **${{ steps.date.outputs.today }}**.
            
            Changes included:
            - Updates from BananaWRT core repository
            - Updates from Additional Packages repository
            
            This PR was automatically generated by the Auto-generate CHANGELOG workflow.
            
            Labels: documentation, automation, changelog
          branch: changelog-update-${{ steps.date.outputs.today }}
          delete-branch: true
          labels: documentation, automation, changelog

      - name: Cleanup
        if: always()
        run: |
            rm -rf ~/.netrc temp ../additional_pack additional_raw.txt core_raw.txt

      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@v2.0.6
        with:
           retain_days: 0
           keep_minimum_runs: 10